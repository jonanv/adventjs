const revealSabotage = require("./index");

test('Test #1 - Retorna un array', () => {
    expect(
        Array.isArray(
            revealSabotage([
                ['*', ' ', ' ', ' '],
                [' ', ' ', '*', ' '],
                [' ', ' ', ' ', ' '],
                ['*', ' ', ' ', ' ']
            ])
        )
    ).toStrictEqual(true);
});

test("Test #2 - revealSabotage([['*', ' ', ' ', ' '],[' ', ' ', '*', ' '],[' ', ' ', ' ', ' '],['*', ' ', ' ', ' ']])", () => {
    expect(
        revealSabotage([
            ['*', ' ', ' ', ' '],
            [' ', ' ', '*', ' '],
            [' ', ' ', ' ', ' '],
            ['*', ' ', ' ', ' ']
        ])
    ).toStrictEqual(
        [
            ["*", "2", "1", "1"],
            ["1", "2", "*", "1"],
            ["1", "2", "1", "1"],
            ["*", "1", " ", " "]
        ]
    );
});

test("Test #3 - revealSabotage([[' ', ' ', ' '],[' ', '*', ' '],[' ', ' ', ' ']])", () => {
    expect(
        revealSabotage([
            [' ', ' ', ' '],
            [' ', '*', ' '],
            [' ', ' ', ' ']
        ])
    ).toStrictEqual(
        [
            ["1", "1", "1"],
            ["1", "*", "1"],
            ["1", "1", "1"]
        ]
    );
});

test("Test #4 - revealSabotage([['*', ' ', ' '],[' ', '*', ' '],[' ', ' ', '*']])", () => {
    expect(
        revealSabotage([
            ['*', ' ', ' '],
            [' ', '*', ' '],
            [' ', ' ', '*']
        ])
    ).toStrictEqual(
        [
            ["*", "2", "1"],
            ["2", "*", "2"],
            ["1", "2", "*"]
        ]
    );
});

test("Test #5 - revealSabotage([['*', ' ', ' '],[' ', ' ', ' '],[' ', ' ', ' ']])", () => {
    expect(
        revealSabotage([
            ['*', ' ', ' '],
            [' ', ' ', ' '],
            [' ', ' ', ' ']
        ])
    ).toStrictEqual(
        [
            ["*", "1", " "],
            ["1", "1", " "],
            [" ", " ", " "]
        ]
    );
});

test("Test #6 - revealSabotage([['*', '*', '*'],['*', ' ', '*'],['*', '*', '*']])", () => {
    expect(
        revealSabotage([
            ['*', '*', '*'],
            ['*', ' ', '*'],
            ['*', '*', '*']
        ])
    ).toStrictEqual(
        [
            ["*", "*", "*"],
            ["*", "8", "*"],
            ["*", "*", "*"]
        ]
    );
});

test("Test #7 - revealSabotage([['*', ' ', '*']])", () => {
    expect(
        revealSabotage([
            ['*', ' ', '*']
        ])
    ).toStrictEqual(
        [
            ["*", "2", "*"]
        ]
    );
});

test("Test #8 - revealSabotage([['*', ' ', ' '],[' ', ' ', ' '],[' ', ' ', '*']])", () => {
    expect(
        revealSabotage([
            ['*', ' ', ' '],
            [' ', ' ', ' '],
            [' ', ' ', '*']
        ])
    ).toStrictEqual(
        [
            ["*", "1", " "],
            ["1", "2", "1"],
            [" ", "1", "*"]
        ]
    );
});

test("Test #9 - revealSabotage([['*', ' ', ' ', ' ', ' '],[' ', ' ', ' ', ' ', ' '],[' ', ' ', '*', ' ', ' '],[' ', ' ', ' ', ' ', ' '],[' ', ' ', ' ', ' ', '*']])) ", () => {
    expect(
        revealSabotage([
            ['*', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' '],
            [' ', ' ', '*', ' ', ' '],
            [' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', '*']
        ])
    ).toStrictEqual(
        [
            ["*", "1", " ", " ", " "],
            ["1", "2", "1", "1", " "],
            [" ", "1", "*", "1", " "],
            [" ", "1", "1", "2", "1"],
            [" ", " ", " ", "1", "*"]
        ]
    );
});